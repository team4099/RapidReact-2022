import edu.wpi.first.gradlerio.GradleRIOPlugin

plugins {
	id "idea"
	id "org.jetbrains.kotlin.jvm" version "1.3.72"
	id "edu.wpi.first.GradleRIO" version "2021.2.2"
	id "com.diffplug.spotless" version "5.1.0"
}

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

def TEAM = 4099
// do not change main class (does not run without it being Main
def ROBOT_MAIN_CLASS = "com.team4099.robot2021.Main"
def includeDesktopSupport = true

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project EmbeddedTools.
deploy {
	targets {
		roboRIO("roborio") {
			// Team number is loaded either from the .wpilib/wpilib_preferences.json
			// or from command line. If not found an exception will be thrown.
			// You can use getTeamOrDefault(team) instead of getTeamNumber if you
			// want to store a team number in this file.
			team = TEAM
		}
	}
	artifacts {
		frcJavaArtifact('frcJava') {
			targets << "roborio"
			// Debug can be overridden by command line, for use with VSCode
			debug = frc.getDebugOrDefault(false)
		}
		// Built in artifact to deploy arbitrary files to the roboRIO.
		fileTreeArtifact('frcStaticFileDeploy') {
			// The directory below is the local directory to deploy
			files = fileTree(dir: 'src/main/deploy')
			// Deploy to RoboRIO target, into /home/lvuser/deploy
			targets << "roborio"
			directory = '/home/lvuser/deploy'
		}
	}
}

repositories {
	mavenCentral()
	jcenter()
	maven { url "https://jitpack.io" }
	maven { url "https://kotlin.bintray.com/kotlinx" }
}

// Defining my dependencies. In this case, WPILib (+ friends)
dependencies {
	implementation wpi.deps.wpilib()
	nativeZip wpi.deps.wpilibJni(wpi.platforms.roborio)
	nativeDesktopZip wpi.deps.wpilibJni(wpi.platforms.desktop)


	implementation wpi.deps.vendor.java()
	nativeZip wpi.deps.vendor.jni(wpi.platforms.roborio)
	nativeDesktopZip wpi.deps.vendor.jni(wpi.platforms.desktop)

	testImplementation "org.junit.jupiter:junit-jupiter-api:5.6.2"
	testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.6.2"

	// Enable simulation gui support. Must check the box in vscode to enable support
	// upon debugging
	simulation wpi.deps.sim.gui(wpi.platforms.desktop, false)
	// We need to add the Kotlin stdlib in order to use most Kotlin language features.
	compile "org.jetbrains.kotlin:kotlin-stdlib"
}

// Setting up my Jar File. In this case, adding all libraries into the main jar ('fat jar')
// in order to make them all available at runtime. Also adding the manifest so WPILib
// knows where to look for our Robot Class.
jar {
	from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
	manifest GradleRIOPlugin.javaManifest(ROBOT_MAIN_CLASS)
}

test {
	useJUnitPlatform()
}

spotless {
	format 'misc', {
		// define the files to apply `misc` to
		target '*.gradle', '*.md', '.gitignore'

		// define the steps to apply to those files
		trimTrailingWhitespace()
		indentWithTabs() // or spaces. Takes an integer argument if you don't like 4
		endWithNewline()
	}
	kotlin {
		// by default the target is every '.kt' and '.kts` file in the java sourcesets
		ktfmt()
		ktlint().userData(['max_line_length': '100', 'insert_final_newline': 'true', 'indent_size': '2', 'continuation_indent_size': '2'])
	}
}

wrapper {
	gradleVersion = '6.0'
}

compileKotlin {
	kotlinOptions {
		freeCompilerArgs = ["-XXLanguage:+InlineClasses"]
	}
}
